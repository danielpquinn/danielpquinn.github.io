{"pageProps":{"postData":{"id":"2021-08-14","contentHtml":"<video autoplay loop controls>\n  <source src=\"/images/2021-08/perlin-circles.mp4\" type=\"video/mp4\">\n</video>\n<p><a href=\"https://nannou.cc/\">Nannou</a> source code:</p>\n<pre><code>use nannou::noise::*;\nuse nannou::prelude::*;\n\nfn main() {\n    nannou::app(model).run();\n}\n\nstruct Model {\n    cols: u32,\n    rows: u32,\n    noise: Perlin,\n}\n\nfn model(app: &#x26;App) -> Model {\n    let width = 200;\n    let height = 200;\n    let scale = 10;\n    app.new_window().size(width, height).view(view).build().unwrap();\n    let cols = width / scale;\n    let rows = height / scale;\n    let mut noise = Perlin::new();\n    noise = noise.set_seed(1);\n\n    Model {\n        cols,\n        rows,\n        noise\n    }\n}\n\nfn view(app: &#x26;App, model: &#x26;Model, frame: Frame) {\n    frame.clear(BLACK);\n    let win = app.main_window();\n    let win_r = win.rect();\n\n    let draw = app.draw();\n    let mut yoff = 0.0;\n    let zoff = app.time / 5.0;\n    let cell_size = (win_r.right() - win_r.left()) / model.cols as f32;\n\n    for col in 0..model.cols {\n        let mut xoff = 0.0;\n        for row in 0..model.rows {\n            let random = model.noise.get([xoff as f64, yoff as f64, zoff as f64]);\n            let start_x = map_range(col as f32, 0.0, model.cols as f32, win_r.left(), win_r.right());\n            let start_y = map_range(row as f32, 0.0, model.rows as f32, win_r.bottom(), win_r.top());\n            let size = random as f32 * cell_size;\n\n            draw.ellipse()\n                .width(size)\n                .height(size)\n                .x_y(start_x, start_y)\n                .color(hsl(random as f32, 1.0, 0.5));\n\n                xoff += 0.1;\n        }\n\n        yoff += 0.1;\n    }\n\n    draw.to_frame(app, &#x26;frame).unwrap();\n    \n    if frame.nth() &#x3C; 300 {\n        let file_path = captured_frame_path(app, &#x26;frame);\n        app.main_window().capture_frame(file_path);\n    }\n}\n\nfn captured_frame_path(app: &#x26;App, frame: &#x26;Frame) -> std::path::PathBuf {\n    app.project_path()\n        .expect(\"failed to locate `project_path`\")\n        .join(\"frames\")\n        .join(format!(\"{:04}\", frame.nth()))\n        .with_extension(\"png\")\n}\n</code></pre>\n","title":"Code Sketch - Perlin Circles","date":"2021-08-14"}},"__N_SSG":true}