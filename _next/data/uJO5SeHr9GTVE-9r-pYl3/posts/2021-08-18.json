{"pageProps":{"postData":{"id":"2021-08-18","contentHtml":"<video autoplay loop controls>\n  <source src=\"/assets/2021-08/wobbler.mp4\" type=\"video/mp4\">\n</video>\n<p><a href=\"https://nannou.cc/\">Nannou</a> source code:</p>\n<pre><code>use nannou::prelude::*;\n\nfn main() {\n    nannou::app(model)\n        .update(update)\n        .run();\n}\n\nstruct Model {\n    cols: u32,\n    rows: u32,\n    grid_size: u32,\n    padding: u32,\n    wobble_timer: i32,\n    wobbler: [i32; 2],\n}\n\nfn model(app: &#x26;App) -> Model {\n    // Create a new window! Store the ID so we can refer to it later.\n    let width = 200;\n    let height = 200;\n    let grid_size = 40;\n    let padding = 5;\n    let cols = width / grid_size;\n    let rows = height / grid_size;\n\n    app.new_window()\n        .size(width, height)\n        .view(view)\n        .build()\n        .unwrap();\n\n    Model {\n        cols,\n        rows,\n        grid_size,\n        padding,\n        wobble_timer: 0,\n        wobbler: [0, 0],\n    }\n}\n\nfn update(_app: &#x26;App, model: &#x26;mut Model, _update: Update) {\n    model.wobble_timer += 1;\n    if model.wobble_timer > 10 {\n        model.wobbler[0] = map_range(random_f32(), 0.0, 1.0, 1.0, (model.cols - 1) as f32).floor() as i32;\n        model.wobbler[1] = map_range(random_f32(), 0.0, 1.0, 1.0, (model.rows - 1) as f32).floor() as i32;\n        model.wobble_timer = 0;\n    }\n}\n\nfn view(app: &#x26;App, model: &#x26;Model, frame: Frame) {\n    let draw = app.draw();\n    let win = app.main_window();\n    let win_r = win.rect();\n\n    if frame.nth() == 0 {\n        draw.background().color(BLACK);\n    }\n    \n    draw.rect()\n        .w_h(win_r.w(), win_r.h())\n        .color(rgba(0.0, 0.0, 0.0, 0.01));\n\n    let t1 = app.time * 2.0;\n    let t2 = app.time * 3.0;\n    \n    for i in 1..model.rows - 1 {\n        for j in 1..model.cols - 1 {\n\n            if model.wobbler[0] == i as i32 &#x26;&#x26; model.wobbler[1] == j as i32 {\n                let mut x = map_range(i as f32, 0.0, model.rows as f32, win_r.left(), win_r.right()) + model.grid_size as f32 / 2.0;\n                let mut y = map_range(j as f32, 0.0, model.rows as f32, win_r.left(), win_r.right()) + model.grid_size as f32 / 2.0;\n                y += t1.sin() * (t2.sin() * 10.0);\n                x += t1.cos() * (t2.cos() * 10.0);\n\n                draw.rect()\n                    .x_y(x, y)\n                    .w_h(model.grid_size as f32 - model.padding as f32 / 2.0, model.grid_size as f32 - model.padding as f32 / 2.0)\n                    .stroke_weight(2.0)\n                    .color(BLACK)\n                    .stroke(hsl(clamp(t1.sin(), 0.6, 0.7), 1.0, 0.5));\n            }\n        }\n    }\n\n    // Write the result of our drawing to the window's frame.\n    draw.to_frame(app, &#x26;frame).unwrap();\n    \n    if frame.nth() &#x3C; 300 {\n        let file_path = captured_frame_path(app, &#x26;frame);\n        app.main_window().capture_frame(file_path);\n    }\n}\n\nfn captured_frame_path(app: &#x26;App, frame: &#x26;Frame) -> std::path::PathBuf {\n    app.project_path()\n        .expect(\"failed to locate `project_path`\")\n        .join(\"frames\")\n        .join(format!(\"{:04}\", frame.nth()))\n        .with_extension(\"png\")\n}\n</code></pre>\n","title":"Code Sketch - Wobbler","date":"2021-08-18"}},"__N_SSG":true}